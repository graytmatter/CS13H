9952 turns on media thing.
Professor Darrell Long
TA Dustin Rhodes

Simplicity is a virtue
Write your code on paper first
Your job is to learn to think clearly and think algorithmically

You will write a lot of programs in C. Weekly or biweekly you will have a program due.
You will use an actual editor, emacs or vi, or sublime text
You’ll use UNIX (FreeBSD) Load a virtual machine.
You’ll use tools like git, make, cc, lldb…

20% notes
30% exams: 15% midterm 15% final
50% programs

Cheating:
Don’t fucking cheat.



Fire up

git2.soe.ucsc.edu


CPU
memory RAM
Storage
Peripherals



CPU
	ALU Arithmetic logic unit it does arithmetic does logic and or not, is this equal to 0
	Control unit:
	Fetch Decode: Grab the next line of code and feeds it to where it needs to go
|||
BUS, there are actually minibuses in modern computers.
|||
DRAM Memory This is where the CPU fetches it’s programs and puts it’s results back

also connected to the BUS is the controller which is in turn connected to the keyboard and Storage
Video is also connected to the BUS

5 buses
A bunch of controllers for most inputs.



We’re going to take C and compile it via CC into Binary which will get loaded which will go to DRAM

lldb is going to be our friend it’s our debugger.

Time for some number theory:
Nature of numbers, 10 means this many
real integers are infinite, on computers int is going to be 32, or 64 bit
Real numbers are truly infinite not just transfinite.
We have floats 32 or 64 bits
1962 = 1*10^3+9*10^2+6*10^1+2*10^0
It’s still the same number in base 2
Base -3 has 1, 0, -1

    101
    x11
    101
+1010


subtractions is a pain

2s complement arithmatic
0101 is 5
1010 is not 5
5+1 = 1011

1011 is - 5

 0101
+1011
   0000 and the last 1 is gone.

natural finite fields



Coding theory can do error correction code, Galouis fields.


VanNewman programming model
Cartoon guide to Computer Science
In the begging there was the command line
Trans finite George Cantor
Reiss Solomon Code



9/30

Create a directory called notes in our repository
Call this weeks notes week 1

T 1 (+5v)
F 0 (-5v)

not¬|
   0|1
   1|0

and^|0 1
   0|0 0
   1|0 1

or ∨|  0 1
   0|  0 1
   1|  1 1
nor is sign of the light circle cross
xor+|  0 1
   0|  0 1
   1|  1 0

PQR
Pand(QorR)= (PorQ)and(PorR)
PandQ = QandP
and distributes over or
or distributes over and

not (PorQ) = notP or notQ
not (PandQ) = notP and notQ

in C
xor ^
not !
and &&
or  ||

bitwise opporators
~ nor
& and
| or

  01010111
& 11011011
  01010011

This tells us the intersection of sets

  01010111
| 11011011
  11011111
Union

~ 01010111= 10101000
Set compliment



Short circuit eval: you know what this is return as soon as you can and don’t bother with second input unless you have to.

Simplicity is chief among the virtues. You’re job is to write clear understandable code. This ins’t the code the computer is running anyway. You save in the algorithm not the execution of the algorithm.

comments are okay
extra variables are okay
Your job is to write beautiful code, I know what that does.
Code is not created by random mutation, write code out by hand ahead of time, write down the algorithm write down the ideas.
Read your code, cross stuff out, don’t be afraid to revise and delete stuff.
Clear thinking, there is no magic in computers.

C doesn’t have safety features on it. icy road a few bears and a free way embankment.


T = … - 2,-1,1,2,3,4 …,
F = 0

4&&2 = T
4&2 = F
 100
&010
 000
4|2 = 6
!4 = 0
~4 = 011 = 3


NAND is functionally complete you can write any boolean expression using just NAND
NOR is also functionally complete.

You can make a not gate with a NOR Gate

Make an exclusive or gate in your free time.
=D- and
=))- or
=)*- nand
=))*- nor



Combinatorial logic, logic gates, boolean

With two nand gates I can store a bit
With 64 nand gates I can store a 32 bit ints
with 128 and gates I can store two 32 bit ints which I can add together with a ripple adder.
two nand gates is static ram
Dram is capacitors, Dram is denser but slower.








